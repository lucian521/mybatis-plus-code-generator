package ${package.Parent}.api.dto.input#if("$!{busPackageName}"!="").${busPackageName}#end;


#if(${swagger})
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
#end
#if(${entityLombokModel})
import lombok.Data;
#end
import com.aliyun.gts.gmall.framework.api.dto.PageParam;
import javax.validation.constraints.NotEmpty;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
/**
 * <p> validreq
 * $!{table.comment}
 * </p>
 *  入参校验 validreq
 * @author ${author}
 * @since ${date}
 */

@Data
#if(${swagger})
@ApiModel(value = "${entity}对象", description = "$!{table.comment}")
#end
public class ${table.originalName}ValidReq {

    /*
    @Null                        被注释的元素必须为 null
    @NotNull                     被注释的元素必须不为 null
    @AssertTrue                  被注释的元素必须为 true
    @AssertFalse                 被注释的元素必须为 false
    @Min(value)                  被注释的元素必须是一个数字，其值必须大于等于指定的最小值
    @Max(value)                  被注释的元素必须是一个数字，其值必须小于等于指定的最大值
    @DecimalMin(value)           被注释的元素必须是一个数字，其值必须大于等于指定的最小值
    @DecimalMax(value)           被注释的元素必须是一个数字，其值必须小于等于指定的最大值
    @Size(max,min)               被注释的元素大小必须在指定的范围内
    @Digits(integer,fraction)    被注释的元素必须是一个数字，其值必须在可接受的范围内
    @Past                        被注释的元素必须是一个过去的日期
    @Future                      被注释的元素必须是一个将来的日期
    @Pattern(value)              被注释的元素必须符合指定的正则表达式
     */

    @NotNull(message = "ID不可为空")
    @ApiModelProperty("主键")
    private Long id;

## ----------  BEGIN 字段循环遍历  ----------
#foreach($field in ${table.fields})

    #if(${field.propertyType}=="String")
    @Size(max=${field.metaInfo.length},message = "${field.comment},长度不能超过${field.metaInfo.length}!")
    #end
    #if(${field.keyFlag})
        #set($keyPropertyName=${field.propertyName})
    #end
    #if(${field.metaInfo.nullable}=="false")
        #if(${field.propertyType}=="String")
    @NotEmpty(message = "${field.comment}不可为空")
        #else
    @NotNull(message = "${field.comment}不可为空")
        #end
    #end
    #if("$!field.comment" != "")
        #if(${swagger})
    @ApiModelProperty("${field.comment}")
        #else
    /**
     * ${field.comment}
     */
        #end
    #end
    private ${field.propertyType} ${field.propertyName};
#end
## ----------  END 字段循环遍历  ----------

#if(!${entityLombokModel})
    #foreach($field in ${table.fields})
        #if(${field.propertyType.equals("boolean")})
            #set($getprefix="is")
        #else
            #set($getprefix="get")
        #end

    public ${field.propertyType} ${getprefix}${field.capitalName}() {
            return ${field.propertyName};
            }

        #if(${chainModel})
        public ${entity} set${field.capitalName}(${field.propertyType} ${field.propertyName}) {
        #else
        public void set${field.capitalName}(${field.propertyType} ${field.propertyName}) {
        #end
            this.${field.propertyName} = ${field.propertyName};
        #if(${chainModel})
                return this;
        #end
            }
    #end
    ## --foreach end---
#end
## --end of #if(!${entityLombokModel})--

#if(${entityColumnConstant})
    #foreach($field in ${table.fields})
    public static final String ${field.name.toUpperCase()} = "${field.name}";

    #end
#end
#if(${activeRecord})
@Override
public Serializable pkVal() {
    #if(${keyPropertyName})
            return this.${keyPropertyName};
    #else
            return null;
    #end
        }

#end
#if(!${entityLombokModel})
@Override
public String toString() {
        return "${entity}{" +
    #foreach($field in ${table.fields})
        #if($!{foreach.index}==0)
                "${field.propertyName}=" + ${field.propertyName} +
        #else
                ", ${field.propertyName}=" + ${field.propertyName} +
        #end
    #end
        "}";
        }
#end
    @ApiModelProperty("页码")
    private PageParam page;
}
