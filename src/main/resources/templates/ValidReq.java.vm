package ${package.Parent}.api.dto.input#if("$!{busPackageName}"!="").${busPackageName}#end;


#if(${swagger})
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
#end
#if(${entityLombokModel})
import lombok.Data;
#end
import com.aliyun.gts.gmall.framework.api.dto.PageParam;
import javax.validation.constraints.NotEmpty;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import javax.validation.constraints.Min;
import javax.validation.constraints.DecimalMin;
import javax.validation.constraints.Digits;
import javax.validation.constraints.Max;
import java.math.BigDecimal;
import java.time.LocalDateTime;

/**
 * <p> validreq
 * $!{table.comment}
 * </p>
 *  入参校验 validreq
 * @author ${author}
 * @since ${date}
 */
@Data
#if(${swagger})
@ApiModel(value = "${entity}对象", description = "$!{table.comment}")
#end
public class ${table.originalName}ValidReq {

    /*
    @Null                        被注释的元素必须为 null
    @NotNull                     被注释的元素必须不为 null
    @AssertTrue                  被注释的元素必须为 true
    @AssertFalse                 被注释的元素必须为 false
    @Min(value)                  被注释的元素必须是一个数字，其值必须大于等于指定的最小值
    @Max(value)                  被注释的元素必须是一个数字，其值必须小于等于指定的最大值
    @DecimalMin(value)           被注释的元素必须是一个数字，其值必须大于等于指定的最小值
    @DecimalMax(value)           被注释的元素必须是一个数字，其值必须小于等于指定的最大值
    @Size(max,min)               被注释的元素大小必须在指定的范围内
    @Digits(integer,fraction)    被注释的元素必须是一个数字，其值必须在可接受的范围内
    @Past                        被注释的元素必须是一个过去的日期
    @Future                      被注释的元素必须是一个将来的日期
    @Pattern(value)              被注释的元素必须符合指定的正则表达式
     */

    /*
    @Null			验证对象是否为null
    @NotNull		验证对象是否不为null, 无法查检长度为0的字符串
    @NotBlank		检查约束字符串是不是Null还有被Trim的长度是否大于0,只对字符串,且会去掉前后空格.
    @NotEmpty		检查约束元素是否为NULL或者是EMPTY.

    Booelan检查
    @AssertTrue		验证 Boolean 对象是否为 true
    @AssertFalse	验证 Boolean 对象是否为 false

    长度检查
    @Size(min=, max=)		验证对象（Array,Collection,Map,String）长度是否在给定的范围之内
    @Length(min=, max=)		验证注解的元素值长度在min和max区间内

    日期检查
    @Past		验证 Date 和 Calendar 对象是否在当前时间之前
    @Future		验证 Date 和 Calendar 对象是否在当前时间之后
    @Pattern	验证 String 对象是否符合正则表达式的规则

    数值检查，建议使用在Stirng,Integer类型，不建议使用在int类型上，因为表单值为“”时无法转换为int，但可以转换为Stirng为"",Integer为null
    @Min			验证 Number 和 String 对象是否大等于指定的值
    @Max			验证 Number 和 String 对象是否小等于指定的值
    @DecimalMax		被标注的值必须不大于约束中指定的最大值. 这个约束的参数是一个通过BigDecimal定义的最大值的字符串表示.小数存在精度
    @DecimalMin		被标注的值必须不小于约束中指定的最小值. 这个约束的参数是一个通过BigDecimal定义的最小值的字符串表示.小数存在精度
    @Digits			验证 Number 和 String 的构成是否合法
    @Digits(integer=,fraction=)		验证字符串是否是符合指定格式的数字，interger指定整数精度，fraction指定小数精度。

    @Range(min=, max=)	验证注解的元素值在最小值和最大值之间
    @Range(min=10000,max=50000,message="range.bean.wage")
    private BigDecimal wage;

    @Valid 递归的对关联对象进行校验, 如果关联对象是个集合或者数组,那么对其中的元素进行递归校验,如果是一个map,则对其中的值部分进行校验.(是否进行递归验证)
    @CreditCardNumber信用卡验证
    @Email  验证是否是邮件地址，如果为null,不进行验证，算通过验证。
    @ScriptAssert(lang= ,script=, alias=)
    @URL(protocol=,host=, port=,regexp=, flags=)
    */
    ## @Max(value=#foreach($item in [0..${field.metaInfo.length}])9#end,message = "${field.comment}-最大不能超过#foreach($item in [0..${field.metaInfo.length}])9#end")

    @NotNull(message = "ID不可为空")
    @Min(value=0,message = "主键-最小不能小于0")
    @ApiModelProperty("主键")
    private Long id;

## ----------  BEGIN 字段循环遍历  ----------
#foreach($field in ${table.fields})

    #if(${field.propertyType}=="String")
    #set($len=${field.metaInfo.length} / 3)
    @Size(max=$len,message = "${field.comment}-个数必须在0和$len之间!")
    #elseif(${field.propertyType}=="Long")
    @Min(value=0,message = "${field.comment}-最小不能小于0")
    @Max(value=9223372036854775807l,message = "${field.comment}-最大不能超过9223372036854775807")
    #elseif(${field.propertyType}=="BigDecimal")
    @Min(value=0,message = "${field.comment}-最小不能小于0")
    @DecimalMin(value = "0", message = "${field.comment}-必须大于或等于0")
    @Digits(integer = ${field.metaInfo.length}, fraction = ${field.metaInfo.scale})
    #end
    #if(${field.keyFlag})
        #set($keyPropertyName=${field.propertyName})
    #end
    #if(${field.metaInfo.nullable}=="false")
        #if(${field.propertyType}=="String")
    @NotEmpty(message = "${field.comment}不可为空")
        #else
    @NotNull(message = "${field.comment}不可为空")
        #end
    #end
    #if("$!field.comment" != "")
        #if(${swagger})
    @ApiModelProperty("${field.comment}")
        #else
    /**
     * ${field.comment}
     */
        #end
    #end
    private ${field.propertyType} ${field.propertyName};
#end
## ----------  END 字段循环遍历  ----------

#if(!${entityLombokModel})
    #foreach($field in ${table.fields})
        #if(${field.propertyType.equals("boolean")})
            #set($getprefix="is")
        #else
            #set($getprefix="get")
        #end

    public ${field.propertyType} ${getprefix}${field.capitalName}() {
            return ${field.propertyName};
            }

        #if(${chainModel})
        public ${entity} set${field.capitalName}(${field.propertyType} ${field.propertyName}) {
        #else
        public void set${field.capitalName}(${field.propertyType} ${field.propertyName}) {
        #end
            this.${field.propertyName} = ${field.propertyName};
        #if(${chainModel})
                return this;
        #end
            }
    #end
    ## --foreach end---
#end
## --end of #if(!${entityLombokModel})--

#if(${entityColumnConstant})
    #foreach($field in ${table.fields})
    public static final String ${field.name.toUpperCase()} = "${field.name}";

    #end
#end
#if(${activeRecord})
@Override
public Serializable pkVal() {
    #if(${keyPropertyName})
            return this.${keyPropertyName};
    #else
            return null;
    #end
        }

#end
#if(!${entityLombokModel})
@Override
public String toString() {
        return "${entity}{" +
    #foreach($field in ${table.fields})
        #if($!{foreach.index}==0)
                "${field.propertyName}=" + ${field.propertyName} +
        #else
                ", ${field.propertyName}=" + ${field.propertyName} +
        #end
    #end
        "}";
        }
#end
    @ApiModelProperty("页码")
    private PageParam page;
}
